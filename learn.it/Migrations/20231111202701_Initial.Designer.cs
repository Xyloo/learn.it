// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using learn.it.Models;

#nullable disable

namespace learn.it.Migrations
{
    [DbContext(typeof(LearnitDbContext))]
    [Migration("20231111202701_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "UserId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("UsersHasGroups", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.HasKey("UserId", "GroupId")
                        .HasName("PK_users_has_groups_user_id");

                    b.HasIndex(new[] { "GroupId" }, "fk_users_has_groups_groups1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_users_has_groups_users1_idx");

                    b.ToTable("users_has_groups", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("achievement_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.HasKey("AchievementId")
                        .HasName("PK_achievements_achievement_id");

                    b.ToTable("achievements", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<int>("AnswerTime")
                        .HasColumnType("int")
                        .HasColumnName("answer_time");

                    b.Property<int?>("FlashcardId")
                        .HasColumnType("int");

                    b.Property<short>("IsCorrect")
                        .HasColumnType("smallint")
                        .HasColumnName("is_correct");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId")
                        .HasName("PK_answers_answer_id");

                    b.HasIndex(new[] { "FlashcardId" }, "fk_answers_flashcards1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_answers_users1_idx");

                    b.ToTable("answers", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.Flashcard", b =>
                {
                    b.Property<int>("FlashcardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("flashcard_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlashcardId"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("definition");

                    b.Property<short>("IsTermText")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("is_term_text")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("StudySetId")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("term");

                    b.HasKey("FlashcardId")
                        .HasName("PK_flashcards_flashcard_id");

                    b.HasIndex(new[] { "StudySetId" }, "fk_flashcards_study_sets1_idx");

                    b.ToTable("flashcards", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.FlashcardUserProgress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("FlashcardId")
                        .HasColumnType("int")
                        .HasColumnName("flashcard_id");

                    b.Property<int>("ConsecutiveCorrectAnswers")
                        .HasColumnType("int")
                        .HasColumnName("consecutive_correct_answers");

                    b.Property<short>("IsMastered")
                        .HasColumnType("smallint")
                        .HasColumnName("is_mastered");

                    b.Property<DateTime?>("MasteredTimestamp")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("mastered_timestamp");

                    b.Property<short>("NeedsMoreRepetitions")
                        .HasColumnType("smallint")
                        .HasColumnName("needs_more_repetitions");

                    b.HasKey("UserId", "FlashcardId")
                        .HasName("PK_flashcard_user_progress_user_id");

                    b.HasIndex(new[] { "FlashcardId" }, "fk_flashcard_user_progress_flashcards1_idx");

                    b.ToTable("flashcard_user_progress", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("GroupId")
                        .HasName("PK_groups_group_id");

                    b.HasIndex(new[] { "OwnerId" }, "fk_groups_users1_idx");

                    b.ToTable("groups", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("login_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginId")
                        .HasName("PK_logins_login_id");

                    b.HasIndex(new[] { "UserId" }, "fk_logins_users_idx");

                    b.ToTable("logins", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("name");

                    b.HasKey("PermissionId")
                        .HasName("PK_permissions_permission_id");

                    b.ToTable("permissions", "learnitdb");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            PermissionId = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("learn.it.Models.StudySet", b =>
                {
                    b.Property<int>("StudySetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("study_set_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudySetId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("visibility");

                    b.HasKey("StudySetId")
                        .HasName("PK_study_sets_study_set_id");

                    b.HasIndex(new[] { "GroupId" }, "fk_study_sets_groups1_idx");

                    b.HasIndex(new[] { "CreatorId" }, "fk_study_sets_users1_idx");

                    b.ToTable("study_sets", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar")
                        .HasDefaultValueSql("(N'default.png')");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastLogin")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("last_login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK_users_user_id");

                    b.HasIndex(new[] { "PermissionId" }, "fk_users_permissions1_idx");

                    b.HasIndex(new[] { "Email" }, "users$email_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users$username_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.UserAchievements", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "AchievementId")
                        .HasName("PK_user_achievements_user_id");

                    b.HasIndex(new[] { "AchievementId" }, "fk_user_achievements_achievements1");

                    b.HasIndex(new[] { "UserId" }, "fk_user_achievements_users1_idx");

                    b.ToTable("user_achievements", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.UserPreferences", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<short>("AutoTts")
                        .HasColumnType("smallint")
                        .HasColumnName("auto_tts");

                    b.Property<short>("EmailReminders")
                        .HasColumnType("smallint")
                        .HasColumnName("email_reminders");

                    b.Property<short>("HighContrastMode")
                        .HasColumnType("smallint")
                        .HasColumnName("high_contrast_mode");

                    b.HasKey("UserId")
                        .HasName("PK_user_preferences_user_id");

                    b.HasIndex(new[] { "UserId" }, "fk_user_preferences_users1_idx");

                    b.ToTable("user_preferences", "learnitdb");
                });

            modelBuilder.Entity("learn.it.Models.UserStats", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("ConsecutiveLoginDays")
                        .HasColumnType("int")
                        .HasColumnName("consecutive_login_days");

                    b.Property<int>("FlashcardsAdded")
                        .HasColumnType("int")
                        .HasColumnName("flashcards_added");

                    b.Property<int>("SetsAdded")
                        .HasColumnType("int")
                        .HasColumnName("sets_added");

                    b.Property<int>("SetsCompleted")
                        .HasColumnType("int")
                        .HasColumnName("sets_completed");

                    b.Property<int>("TotalFlashcardsMastered")
                        .HasColumnType("int")
                        .HasColumnName("total_flashcards_mastered");

                    b.Property<int>("TotalLoginDays")
                        .HasColumnType("int")
                        .HasColumnName("total_login_days");

                    b.HasKey("UserId")
                        .HasName("PK_user_stats_user_id");

                    b.HasIndex(new[] { "UserId" }, "fk_user_stats_users1_idx");

                    b.ToTable("user_stats", "learnitdb");
                });

            modelBuilder.Entity("UsersHasGroups", b =>
                {
                    b.HasOne("learn.it.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("users_has_groups$fk_users_has_groups_groups1");

                    b.HasOne("learn.it.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("users_has_groups$fk_users_has_groups_users1");
                });

            modelBuilder.Entity("learn.it.Models.Answer", b =>
                {
                    b.HasOne("learn.it.Models.Flashcard", "Flashcard")
                        .WithMany("Answers")
                        .HasForeignKey("FlashcardId")
                        .HasConstraintName("answers$fk_answers_flashcards1");

                    b.HasOne("learn.it.Models.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("answers$fk_answers_users1");

                    b.Navigation("Flashcard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn.it.Models.Flashcard", b =>
                {
                    b.HasOne("learn.it.Models.StudySet", "StudySet")
                        .WithMany("Flashcards")
                        .HasForeignKey("StudySetId")
                        .HasConstraintName("flashcards$fk_flashcards_study_sets1");

                    b.Navigation("StudySet");
                });

            modelBuilder.Entity("learn.it.Models.FlashcardUserProgress", b =>
                {
                    b.HasOne("learn.it.Models.Flashcard", "Flashcard")
                        .WithMany("FlashcardUserProgress")
                        .HasForeignKey("FlashcardId")
                        .IsRequired()
                        .HasConstraintName("flashcard_user_progress$fk_flashcard_user_progress_flashcards1");

                    b.HasOne("learn.it.Models.User", "User")
                        .WithMany("FlashcardUserProgress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("flashcard_user_progress$fk_flashcard_user_progress_users1");

                    b.Navigation("Flashcard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn.it.Models.Group", b =>
                {
                    b.HasOne("learn.it.Models.User", "Owner")
                        .WithMany("GroupsOwner")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("groups$fk_groups_users1");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("learn.it.Models.Login", b =>
                {
                    b.HasOne("learn.it.Models.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("logins$fk_logins_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn.it.Models.StudySet", b =>
                {
                    b.HasOne("learn.it.Models.User", "Creator")
                        .WithMany("StudySets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("study_sets$fk_study_sets_users1");

                    b.HasOne("learn.it.Models.Group", "Group")
                        .WithMany("StudySets")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("study_sets$fk_study_sets_groups1");

                    b.Navigation("Creator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("learn.it.Models.User", b =>
                {
                    b.HasOne("learn.it.Models.Permission", "Permissions")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("users$fk_users_permissions1");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("learn.it.Models.UserAchievements", b =>
                {
                    b.HasOne("learn.it.Models.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_achievements$fk_user_achievements_achievements1");

                    b.HasOne("learn.it.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_achievements$fk_user_achievements_users1");

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn.it.Models.UserPreferences", b =>
                {
                    b.HasOne("learn.it.Models.User", "User")
                        .WithOne("UserPreferences")
                        .HasForeignKey("learn.it.Models.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_preferences$fk_user_preferences_users1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn.it.Models.UserStats", b =>
                {
                    b.HasOne("learn.it.Models.User", "User")
                        .WithOne("UserStats")
                        .HasForeignKey("learn.it.Models.UserStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_stats$fk_user_stats_users1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn.it.Models.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("learn.it.Models.Flashcard", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("FlashcardUserProgress");
                });

            modelBuilder.Entity("learn.it.Models.Group", b =>
                {
                    b.Navigation("StudySets");
                });

            modelBuilder.Entity("learn.it.Models.Permission", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("learn.it.Models.StudySet", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("learn.it.Models.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("FlashcardUserProgress");

                    b.Navigation("GroupsOwner");

                    b.Navigation("Logins");

                    b.Navigation("StudySets");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserPreferences")
                        .IsRequired();

                    b.Navigation("UserStats")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
