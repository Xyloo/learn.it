// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using learn.it.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;

namespace learn.it.Models;

/*
 * NOTE: If you are using EF Core migrations, please note that the following code is required to seed the database with the default admin user.
 * If modifying the db schema, add the following to the created migration **BEFORE** running the update-database command:
 * migrationBuilder.InsertData(
                schema: "learnitdb",
                table: "users",
                columns: new[]
                {
                    "user_id", "username", "email", "password", "create_time", "last_login", "avatar", "PermissionId"
                },
                values: new object[,]
                {
                    { -1, "testAdmin", "test@admin.com", "AQAAAAIAAYagAAAAEHgdRpl0GvK6IgRIWMN1SJfmJ2yirgRsimXNDeQx0LuSyPTqEQRenosehwnQfQSpGA==", DateTime.UtcNow, null, null, 1 }
                });

            migrationBuilder.InsertData(
                schema: "learnitdb",
                table: "user_stats",
                columns: new[]
                {
                    "user_id", "sets_completed", "total_login_days", "total_flashcards_mastered",
                    "consecutive_login_days", "sets_added", "flashcards_added"
                },
                values: new object[,]
                {
                    { -1, 0, 0, 0, 0, 0, 0 }
                });

            migrationBuilder.InsertData(
                schema: "learnitdb",
                table: "user_preferences",
                columns: new[]
                { "user_id", "high_contrast_mode", "email_reminders", "auto_tts" },
                values: new object[,]
                {
                    { -1, 0, 0, 0 }
                });
 */

public partial class LearnitDbContext : DbContext
{
    public LearnitDbContext()
    {
    }

    public LearnitDbContext(DbContextOptions<LearnitDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Achievement> Achievements { get; set; }

    public virtual DbSet<Answer> Answers { get; set; }

    public virtual DbSet<FlashcardUserProgress> FlashcardUserProgress { get; set; }

    public virtual DbSet<Flashcard> Flashcards { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<GroupJoinRequest> GroupJoinRequests { get; set; }

    public virtual DbSet<Login> Logins { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<StudySet> StudySets { get; set; }

    public virtual DbSet<UserAchievements> UserAchievements { get; set; }

    public virtual DbSet<UserPreferences> UserPreferences { get; set; }

    public virtual DbSet<UserStats> UserStats { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Achievement>(entity =>
        {
            entity.HasKey(e => e.AchievementId).HasName("PK_achievements_achievement_id");

            entity.Property(e => e.AchievementId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Answer>(entity =>
        {
            entity.HasKey(e => e.AnswerId).HasName("PK_answers_answer_id");

            entity.Property(e => e.AnswerId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Flashcard).WithMany(p => p.Answers)
                .OnDelete(DeleteBehavior.ClientCascade)
                .HasConstraintName("answers$fk_answers_flashcards1");

            entity.HasOne(d => d.User).WithMany(p => p.Answers).HasConstraintName("answers$fk_answers_users1");
        });

        modelBuilder.Entity<FlashcardUserProgress>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.FlashcardId }).HasName("PK_flashcard_user_progress_user_id");

            entity.HasOne(d => d.Flashcard).WithMany(p => p.FlashcardUserProgress)
                .OnDelete(DeleteBehavior.ClientCascade)
                .HasConstraintName("flashcard_user_progress$fk_flashcard_user_progress_flashcards1");

            entity.HasOne(d => d.User).WithMany(p => p.FlashcardUserProgress).HasConstraintName("flashcard_user_progress$fk_flashcard_user_progress_users1").OnDelete(DeleteBehavior.ClientCascade);
        });

        modelBuilder.Entity<Flashcard>(entity =>
        {
            entity.HasKey(e => e.FlashcardId).HasName("PK_flashcards_flashcard_id");

            entity.Property(e => e.FlashcardId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.StudySet).WithMany(p => p.Flashcards).HasConstraintName("flashcards$fk_flashcards_study_sets1").OnDelete(DeleteBehavior.ClientCascade);
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK_groups_group_id");

            entity.Property(e => e.GroupId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Creator).WithMany(p => p.GroupCreator).HasConstraintName("groups$fk_groups_users1").OnDelete(DeleteBehavior.ClientCascade);
        });

        modelBuilder.Entity<Login>(entity =>
        {
            entity.HasKey(e => e.LoginId).HasName("PK_logins_login_id");

            entity.Property(e => e.LoginId).ValueGeneratedOnAdd();
            entity.Property(e => e.Timestamp).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.User).WithMany(p => p.Logins).HasConstraintName("logins$fk_logins_users").OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.PermissionId).HasName("PK_permissions_permission_id");

            entity.Property(e => e.PermissionId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<StudySet>(entity =>
        {
            entity.HasKey(e => e.StudySetId).HasName("PK_study_sets_study_set_id");

            entity.Property(e => e.StudySetId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Creator).WithMany(p => p.StudySets).HasConstraintName("study_sets$fk_study_sets_users1").OnDelete(DeleteBehavior.ClientCascade);

            entity.HasOne(d => d.Group).WithMany(p => p.StudySets).HasConstraintName("study_sets$fk_study_sets_groups1").OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<GroupJoinRequest>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.GroupId }).HasName("PK_group_join_requests_user_id");

            entity.HasOne(d => d.Group).WithMany(p => p.GroupJoinRequests).HasConstraintName("group_join_requests$fk_group_join_requests_groups1").OnDelete(DeleteBehavior.ClientCascade);

            entity.HasOne(d => d.Creator).WithMany(p => p.GroupJoinRequests).HasConstraintName("group_join_requests$fk_group_join_requests_users1").OnDelete(DeleteBehavior.ClientCascade);
        });

        modelBuilder.Entity<UserAchievements>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.AchievementId }).HasName("PK_user_achievements_user_id");

            entity.Property(e => e.Timestamp).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Achievement).WithMany(p => p.UserAchievements).HasConstraintName("user_achievements$fk_user_achievements_achievements1").OnDelete(DeleteBehavior.ClientCascade);

            entity.HasOne(d => d.User).WithMany(p => p.UserAchievements).HasConstraintName("user_achievements$fk_user_achievements_users1").OnDelete(DeleteBehavior.ClientCascade);
        });

        modelBuilder.Entity<UserPreferences>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_user_preferences_user_id");

            entity.Property(e => e.UserId).ValueGeneratedNever();

            entity.HasOne(d => d.User).WithOne(p => p.UserPreferences).HasConstraintName("user_preferences$fk_user_preferences_users1").OnDelete(DeleteBehavior.ClientCascade);
        });

        modelBuilder.Entity<UserStats>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_user_stats_user_id");

            entity.Property(e => e.UserId).ValueGeneratedNever();

            entity.HasOne(d => d.User).WithOne(p => p.UserStats).HasConstraintName("user_stats$fk_user_stats_users1").OnDelete(DeleteBehavior.ClientCascade);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_users_user_id");

            entity.HasOne(u => u.UserStats).WithOne(us => us.User).HasForeignKey<UserStats>(us => us.UserId).OnDelete(DeleteBehavior.ClientCascade);
            entity.HasOne(u => u.UserPreferences).WithOne(us => us.User).HasForeignKey<UserPreferences>(us => us.UserId).OnDelete(DeleteBehavior.ClientCascade);

            entity.Property(e => e.UserId).ValueGeneratedOnAdd();
            entity.Property(e => e.Avatar).HasDefaultValueSql("(N'default.png')");
            entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Permissions).WithMany(p => p.Users)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("users$fk_users_permissions1");

            entity.HasMany(d => d.Groups).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UsersHasGroups",
                    r => r.HasOne<Group>().WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("users_has_groups$fk_users_has_groups_groups1"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("users_has_groups$fk_users_has_groups_users1"),
                    j =>
                    {
                        j.HasKey("UserId", "GroupId").HasName("PK_users_has_groups_user_id");
                        j.ToTable("users_has_groups", "learnitdb");
                        j.HasIndex(new[] { "GroupId" }, "fk_users_has_groups_groups1_idx");
                        j.HasIndex(new[] { "UserId" }, "fk_users_has_groups_users1_idx");
                        j.IndexerProperty<int>("UserId").HasColumnName("user_id");
                        j.IndexerProperty<int>("GroupId").HasColumnName("group_id");
                    });
        });
        modelBuilder.Seed();
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}